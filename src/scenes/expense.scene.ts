import { Markup, Scenes } from "telegraf"
import { Expense, IExpense } from "../models/Expense"
import { Budget } from '../models/Budget'
import { ExpenseService } from "../services/expense.service"
import moment from 'moment'
import { MyWizardContext } from "../context/context"

const availableTypes = ['üçé –ü—Ä–æ–¥—É–∫—Ç—ã', 'üè† –ë—ã—Ç–æ–≤–∞—è', 'üñ• –¢–µ—Ö–Ω–∏–∫–∞', 'üìÉ –ü–æ–¥–ø–∏—Å–∫–∏/–ü–∞—Å—Å–∏–≤—ã', 'üëî –û–¥–µ–∂–¥–∞', '‚ùì –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ']

export const makeExpenseCommand = new Scenes.WizardScene<MyWizardContext>(
    'make-expense',
    (ctx) => {
        ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏', Markup.keyboard([
            ['üçé –ü—Ä–æ–¥—É–∫—Ç—ã', 'üè† –ë—ã—Ç–æ–≤–∞—è'],
            ['üñ• –¢–µ—Ö–Ω–∏–∫–∞', 'üìÉ –ü–æ–¥–ø–∏—Å–∫–∏/–ü–∞—Å—Å–∏–≤—ã'],
            ['üëî –û–¥–µ–∂–¥–∞', '‚ùì –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ'],
            ['–í—ã–π—Ç–∏'],
        ]).resize())
        return ctx.wizard.next()
    },
    (ctx) => {
        const selectedType = ctx.message?.text || ''

        if (selectedType === '–í—ã–π—Ç–∏') {
            ctx.reply('–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞ —Ç—Ä–∞—Ç.', {
                reply_markup: {
                    remove_keyboard: true,
                },
            })
            return ctx.scene.leave()
        }

        if (!availableTypes.includes(selectedType)) {
            ctx.reply('–¢–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.')
            return ctx.wizard.selectStep(ctx.wizard.cursor)
        }

        ctx.wizard.state.selectedType = selectedType
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏:', {
            reply_markup: {
                remove_keyboard: true,
            },
        })
        return ctx.wizard.next()
    },
    async (ctx) => {
        const amountText = ctx.message?.text || ''
        const amount = parseFloat(amountText)

        if (isNaN(amount)) {
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.')
            return
        }

        const currentMonth = moment().month() + 1
        const currentYear = moment().year()

        const budget = await Budget.findOne({
            userId: ctx.from?.id,
            month: currentMonth,
            year: currentYear
        })

        if (!budget) {
            ctx.reply("–í—ã –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –±—é–¥–∂–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
            return
        }

        const totalExpenses = budget.expenses.reduce((acc, expense) => acc + expense.amount, 0)
        const remainingBudget = budget.amount - totalExpenses

        if (amount > remainingBudget) {
            ctx.reply(`–í–∞—à–∏ —Ç—Ä–∞—Ç—ã –ø—Ä–µ–≤—ã—à–∞—é—Ç –æ—Å—Ç–∞–≤—à–∏–π—Å—è –±—é–¥–∂–µ—Ç –Ω–∞ ${amount - remainingBudget}‚ÇΩ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–æ–≤—ã–π –±—é–¥–∂–µ—Ç.`)
            return
        }

        const expense = new Expense({
            userId: ctx.from?.id,
            amount: amount,
            description: ctx.wizard.state.selectedType,
            date: new Date(),
        })

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É –≤ –±—é–¥–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        budget.expenses.push(expense)
        
        await expense.save()
        await budget.save()

        ctx.reply('–í–∞—à–∏ —Ç—Ä–∞—Ç—ã –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', {
            reply_markup: {
                remove_keyboard: true,
            },
        })
        return ctx.scene.leave()
    }
)

export const getExpensesScene = new Scenes.WizardScene<MyWizardContext>(
    'get-expenses',
    async (ctx) => {
        const expenses = await ExpenseService.getUserExpensesForCurrentMonth(ctx.from?.id || 0)

        if (!expenses.length) {
            ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–∞—Ç –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ.')
            return ctx.scene.leave()
        }

        ctx.wizard.state.expenses = expenses  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞—Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–∑–∞—Ä–¥–∞

        ctx.reply('–•–æ—Ç–∏—Ç–µ –≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ —Ç—Ä–∞—Ç—ã —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏–ª–∏ –≤ –ø–ª–æ—Å–∫–æ–º –≤–∏–¥–µ?', Markup.keyboard([
            Markup.button.callback('–°–¥–µ–ª–∞—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É', 'grouped'),
            Markup.button.callback('–í –ø–ª–æ—Å–∫–æ–º –≤–∏–¥–µ', 'flat'),
        ]).resize())

        return ctx.wizard.next()
    },
    (ctx) => {
        const choice = ctx.message?.text || ''
        const expenses: IExpense[] = ctx.wizard.state.expenses || []

        if (choice === '–í –ø–ª–æ—Å–∫–æ–º –≤–∏–¥–µ') {
            let message = '–í–∞—à–∏ —Ç—Ä–∞—Ç—ã:\n'
            expenses.forEach(exp => {
                message += `üìÖ ${moment(exp.date).format('DD.MM.YYYY')} - ${exp.description} - ${exp.amount}‚ÇΩ\n`
            })
            ctx.reply(message, {
                reply_markup: {
                    remove_keyboard: true,
                },
            })
        } else if (choice === '–°–¥–µ–ª–∞—Ç—å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É') {
            const groupedExpenses: { [key: string]: number } = {}

            expenses.forEach(exp => {
                if (!groupedExpenses[exp.description]) {
                    groupedExpenses[exp.description] = 0
                }
                groupedExpenses[exp.description] += exp.amount
            })

            let message = '–í–∞—à–∏ —Ç—Ä–∞—Ç—ã (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ):\n'
            for (const [desc, amount] of Object.entries(groupedExpenses)) {
                message += `${desc}: ${amount}‚ÇΩ\n`
            }
            ctx.reply(message, {
                reply_markup: {
                    remove_keyboard: true,
                },
            })
        } else {
            ctx.reply('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞')
        }

        return ctx.scene.leave()
    }
)